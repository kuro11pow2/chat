namespace Tests
{
    public class Utf8PacketTests
    {
        [Theory]
        [InlineData(@"0123", @"0123")]
        [InlineData(@"abcxyz", @"abcxyz")]
        [InlineData(@"@!#$%^()[]", @"@!#$%^()[]")]
        [InlineData(@"가나다뀕팛", @"가나다뀕팛")]
        [InlineData(@"😂🤣⛴🛬🎁", @"😂🤣⛴🛬🎁")]
        [InlineData
        [InlineData
        static void Utf8StringPacketTest(string input, string expected)
        {
            Utf8Packet packet = new();
            packet.Set(input);
            var actual = packet.GetRawString();
            Assert.Equal(actual, expected);
        }

        [Theory]
        [InlineData(@"0123", @"0123")]
        [InlineData(@"abcxyz", @"abcxyz")]
        [InlineData(@"@!#$%^()[]", @"@!#$%^()[]")]
        [InlineData(@"가나다뀕팛", @"가나다뀕팛")]
        [InlineData(@"😂🤣⛴🛬🎁", @"😂🤣⛴🛬🎁")]
        [InlineData
        [InlineData
        static void Utf8MessagePacketTest(string input, string expected)
        {
            Message message = new();
            message.SetBroadcast(input);

            Utf8Packet packet = new();
            packet.Set(message);

            var actual_message = Serializer<Message>.Deserialize(packet.GetRawString());
            var actual = actual_message.Str;
            Assert.Equal(actual, expected);
        }
    }
}